#include <stdio.h>
#define size 20

int i;
int front = -1, rear = -1;
int queue[size];
int bucketSize, outRate, nPacket, packetSize, storedSize = 0, outgoing;

void enqueue(int packSize)
{
    if (front == -1)
        front++;
    rear++;
    if (rear == 20)
        rear = 0;
    queue[rear] = packSize;
}

int dequeue()
{
    int temp = queue[front];
    if (front == rear)
        front = rear = -1;
    else
        front++;
    if (front == 20)
        front = 0;
    return temp;
}

void emptyBucket()
{
    printf("\n\nEMPTYING BUCKET\n\n");

    while (storedSize)
    {
        int outgoing = 0;
        while (outgoing < outRate && storedSize > 0)
        {
            packetSize = dequeue();
            outgoing += packetSize;
            printf("-->Outgoing packet size = %d\n", packetSize);
            storedSize -= packetSize;
        }
        printf("%d OUT OF %d LEFT IN BUCKET\n\n", bucketSize - storedSize, bucketSize);
    }
}

int main()
{

    printf("Enter the bucket size: ");
    scanf("%d", &bucketSize);
    printf("\nEnter outgoing rate: ");
    scanf("%d", &outRate);

    while (1)
    {
        int outgoing = 0;
        printf("\nEnter the number of incoming packets: ");
        scanf("%d", &nPacket);

        if (nPacket == 0)
        {
            break;
        }

        for (i = 0; i < nPacket; i++)
        {
            printf("\nEnter the size of packet[%d]: ", i + 1);
            scanf("%d", &packetSize);

            if (packetSize > bucketSize - storedSize)
            {
                printf("PACKET DROPPED");
                emptyBucket();
                i--;
                continue;
            }

            storedSize += packetSize;
            enqueue(packetSize);
            printf("(%d out of %d in bucket\n", bucketSize - storedSize, bucketSize);
        }

        while (outgoing < outRate && storedSize > 0)
        {
            packetSize = dequeue();
            outgoing += packetSize;
            printf("\n-->Outgoing packet size = %d\n", packetSize);
            storedSize -= packetSize;
        }

        printf("%d OUT OF %d LEFT IN BUCKET\n\n", bucketSize - storedSize, bucketSize);
    }

    emptyBucket();
}
